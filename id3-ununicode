#!/usr/bin/env python
# 
# Copyright (c) 2010 Yacin Nadji
# 
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

import sys
import os
import fnmatch
from optparse import OptionParser

from mutagen.easyid3 import EasyID3 as id3

def ununicode(mp3path, dryrun):
    mp3 = id3(mp3path)
    for key in mp3.keys():
        new = map(lambda x: x.encode('ASCII', 'ignore'), mp3[key])
        print('"%s"\t->\t"%s"' % (mp3[key], new))

        mp3[key] = new

    if not dryrun:
        mp3.save()
        

def main():
    """main function for standalone usage"""
    usage = "usage: %prog [options] file.mp3|mp3dir"
    parser = OptionParser(usage=usage)
    parser.add_option("-d", "--dry-run", dest="dryrun", default=False,
            action="store_true", help="Show what would be done, without making any changes.")

    (options, args) = parser.parse_args()

    if len(args) != 1:
        parser.print_help()
        return 2

    # do stuff
    if os.path.isfile(args[0]):
        ununicode(args[0], options.dryrun)
    else:
        for root, dirs, files in os.walk(args[0]):
            for filename in fnmatch.filter(files, "*.mp3"):
                ununicode(os.path.join(root, filename), options.dryrun)

if __name__ == '__main__':
    sys.exit(main())
